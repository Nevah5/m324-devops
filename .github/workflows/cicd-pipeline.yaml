name: "CI/CD Pipeline"

on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - images/**
      - README.md
      - .gitignore

jobs:
  versioning:
    runs-on: ubuntu-latest
    name: üè∑Ô∏è Versioning
    permissions:
      contents: write
    outputs:
      VERSION: ${{ steps.set_version.outputs.VERSION }}
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          fetch-tags: true
      - name: üïê Get current version
        id: get_version
        if: github.ref_name == 'main' || github.ref_name == 'develop'
        run: |
          develop=$(git describe --tags $(git rev-list --tags --max-count=1)) # gets the latest tag on all branches
          if [[ ${{ github.ref_name }} == 'main' ]]; then
            latest=$develop
          else
            latest=$(git describe --tags --exact-match --abbrev=0)
          fi

          echo "LATEST=$latest" >> $GITHUB_OUTPUT
          echo "DEVELOP=$develop" >> $GITHUB_OUTPUT

          echo Release version: $latest
          echo Develop version: $develop
      - name: ‚õ≥ Set new version
        id: set_version
        run: |
          if ! [[ '${{ github.ref_name }}' == 'main' ]] && ! [[ '${{ github.ref_name }}' == 'develop' ]]; then
            # this code might not be necessary, but it's here just in case
            echo "Not on main or develop"
            hash=$(echo ${{ github.sha }} | cut -c1-7)
            version=$(echo "${{ github.ref_name }}-$hash" | sed 's/\//-/g')
            echo "VERSION=$version" >> $GITHUB_OUTPUT
            echo "Using $version as the version"
          else
            latest=${{ steps.get_version.outputs.LATEST }}
            latest_minor=$(echo $latest | awk -F. '{print $2}')
            latest_patch=$(echo $latest | awk -F. '{print $3}')

            develop=${{ steps.get_version.outputs.DEVELOP }}
            develop_major=$(echo $develop | awk -F. '{print $1}' | cut -d'v' -f2)
            develop_minor=$(echo $develop | awk -F. '{print $2}')
            develop_patch=$(echo $develop | awk -F. '{print $3}' | cut -d'-' -f1)


            if [[ ${{ github.ref_name }} == 'develop' ]]; then
              if [[ ${{ vars.MAJOR_VERSION }} != $develop_major ]]; then
                version=v$((develop_major + 1)).0.0
              else
                version=v$develop_major.$develop_minor.$((develop_patch + 1))
              fi
            else
              version=v$develop_major.$((develop_minor + 1)).0
            fi

            echo "VERSION=$version" >> $GITHUB_OUTPUT
            echo "Using $version as the version"
          fi
      - name: üì¶ Checkout develop
        if: github.ref_name == 'develop'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: üìå Push tag
        if: github.ref_name == 'main' || github.ref_name == 'develop'
        run: |
          git tag ${{ steps.set_version.outputs.VERSION }}
          git push --tags
  build-and-push:
    name: üî® Build and push
    runs-on: self-hosted
    permissions:
      packages: write
    environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}
    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4
      - name: üìê Setup Docker AWS ECR
        if: ${{ vars.DEPLOY_TO_AWS == 'true' }}
        uses: ./.github/actions/setup-ecr
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_ECR_REGISTRY: ${{ vars.AWS_ECR_REGISTRY }}
      - name: üöß Build docker image
        run: |
          docker build -t ${{ vars.AWS_ECR_REPOSITORY_NAME }} .
          docker tag ${{ vars.AWS_ECR_REPOSITORY_NAME }} ${{ vars.AWS_ECR_REGISTRY }}/${{ vars.AWS_ECR_REPOSITORY_NAME }}:${{ vars.VERSION }}
      - name: üéØ Push docker image
        if: ${{ vars.DEPLOY_TO_AWS == 'true' }}
        run: |
          docker push ${{ vars.AWS_ECR_REGISTRY }}/${{ vars.AWS_ECR_REPOSITORY_NAME }}:${{ vars.VERSION }}
      - name: üïî Push latest tag
        if: ${{ github.ref_name == 'develop' && vars.DEPLOY_TO_AWS == 'true' }}
        run: |
          docker tag ${{ vars.AWS_ECR_REPOSITORY_NAME }} ${{ vars.AWS_ECR_REGISTRY }}/${{ vars.AWS_ECR_REPOSITORY_NAME }}:latest
          docker push ${{ vars.AWS_ECR_REGISTRY }}/${{ vars.AWS_ECR_REPOSITORY_NAME }}:latest
      - name: üö¢ Push to ghcr.io
        if: ${{ github.ref_name == 'main' }}
        run: |
          echo "üîë Logging into ghcr.io"
          docker login ghcr.io -u ${{ github.repository_owner }} -p ${{ secrets.GITHUB_TOKEN }}

          echo "üß© Preparing image name"
          GITHUB_REPOSITORY=${{ github.repository }}
          GHCR_REPO=ghcr.io/${GITHUB_REPOSITORY@L}
          echo "Registry: $GHCR_REPO"

          echo "üöÄ Pushing to ghcr.io"
          docker tag ${{ vars.AWS_ECR_REPOSITORY_NAME }} $GHCR_REPO:latest
          docker push $GHCR_REPO:latest
          docker tag ${{ vars.AWS_ECR_REPOSITORY_NAME }} $GHCR_REPO:${{ vars.VERSION }}
          docker push $GHCR_REPO:${{ vars.VERSION }}
  deploy:
    name: üöÄ Deploy to AWS
    runs-on: self-hosted
    needs: build-and-push
    if: ${{ vars.DEPLOY_TO_AWS == 'true' }}
    environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}
    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4
      - name: üîÅ Update task definition
        if: ${{ github.ref_name == 'main' }}
        run: |
          echo "üîß Replacing template values in json"
          sed -i 's/<IMAGE_URI>/${{ vars.AWS_ECR_REGISTRY }}\/${{ vars.AWS_ECR_REPOSITORY_NAME }}:${{ vars.VERSION }}/g' ./.github/aws/task-definition-prod.json
          sed -i 's/<DB_USERNAME>/${{ vars.DB_USERNAME }}/g' ./.github/aws/task-definition-prod.json
          sed -i 's|<DB_URL>|${{ vars.DB_URL }}|g' ./.github/aws/task-definition-prod.json
          sed -i 's/<DB_PASSWORD>/${{ secrets.DB_PASSWORD }}/g' ./.github/aws/task-definition-prod.json

          echo "üìÑ Task definition content"
          cat ./.github/aws/task-definition-prod.json
      - name: üöÄ Deploy to ECS
        run: |
          echo "üîí Setting AWS credentials"
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}

          if [ ${{ github.ref_name }} == 'main' ]; then
            echo "üì¢ Updating task definition"
            aws ecs register-task-definition --family ${{ vars.AWS_TASK_DEFINITION_NAME }} --cli-input-json file://./.github/aws/task-definition-prod.json
          fi

          echo "üöÄ Deploying to ECS"
          aws ecs update-service --cluster ${{ vars.AWS_ECS_CLUSTER }} --service ${{ vars.AWS_ECS_SERVICE }}  --task-definition ${{ vars.AWS_TASK_DEFINITION_NAME }} --force-new-deployment
  create-release:
    name: üêô Create GitHub Release
    if: ${{ github.ref_name == 'main' }}
    runs-on: self-hosted
    permissions:
      contents: write
    needs: build-and-push
    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4
      - name: ü™¢ Setup git
        run: |
          git config --global user.name "CI/CD Pipeline"
          git config --global user.email "contact@nevah5.dev"
      - name: üè∑Ô∏è Create tag
        run: |
          git tag -a ${{ vars.VERSION }} -m "Version ${{ vars.VERSION }}"
          git push --tags
      - uses: ncipollo/release-action@v1
        with:
          tag: ${{ vars.VERSION }}
          name: Version ${{ vars.VERSION }}
          generateReleaseNotes: true
