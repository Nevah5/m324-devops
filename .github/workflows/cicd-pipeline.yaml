name: "CI/CD Pipeline"

on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - images/**
      - README.md
      - .gitignore

jobs:
  build-and-push:
    name: üî® Build and push
    runs-on: self-hosted
    permissions:
      packages: write
    environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}
    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4
      - name: üìê Setup Docker AWS ECR
        uses: ./.github/actions/setup-ecr
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_ECR_REGISTRY: ${{ vars.AWS_ECR_REGISTRY }}
      - name: üöß Build docker image
        run: |
          docker build -t ${{ vars.AWS_ECR_REPOSITORY_NAME }} .
          docker tag ${{ vars.AWS_ECR_REPOSITORY_NAME }} ${{ vars.AWS_ECR_REGISTRY }}/${{ vars.AWS_ECR_REPOSITORY_NAME }}:${{ vars.VERSION }}
      - name: üéØ Push docker image
        run: |
          docker push ${{ vars.AWS_ECR_REGISTRY }}/${{ vars.AWS_ECR_REPOSITORY_NAME }}:${{ vars.VERSION }}
      - name: üïî Push latest tag
        if: ${{ github.ref_name == 'develop' }}
        run: |
          docker tag ${{ vars.AWS_ECR_REPOSITORY_NAME }} ${{ vars.AWS_ECR_REGISTRY }}/${{ vars.AWS_ECR_REPOSITORY_NAME }}:latest
          docker push ${{ vars.AWS_ECR_REGISTRY }}/${{ vars.AWS_ECR_REPOSITORY_NAME }}:latest
      - name: üö¢ Push to ghcr.io
        if: ${{ github.ref_name == 'main' }}
        run: |
          echo "üîë Logging into ghcr.io"
          docker login ghcr.io -u ${{ github.repository_owner }} -p ${{ secrets.GITHUB_TOKEN }}

          echo "üß© Preparing image name"
          GITHUB_REPOSITORY=${{ github.repository }}
          GHCR_REPO=ghcr.io/${GITHUB_REPOSITORY@L}
          echo "Registry: $GHCR_REPO"

          echo "üöÄ Pushing to ghcr.io"
          docker tag ${{ vars.AWS_ECR_REPOSITORY_NAME }} $GHCR_REPO:latest
          docker push $GHCR_REPO:latest
          docker tag ${{ vars.AWS_ECR_REPOSITORY_NAME }} $GHCR_REPO:${{ vars.VERSION }}
          docker push $GHCR_REPO:${{ vars.VERSION }}
  deploy:
    name: üöÄ Deploy to AWS
    runs-on: self-hosted
    needs: build-and-push
    environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}
    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4
      - name: üîÅ Update task definition
        if: ${{ github.ref_name == 'main' }}
        run: |
          sed -i 's/<IMAGE_URI>/${{ vars.AWS_ECR_REGISTRY }}\/${{ vars.AWS_ECR_REPOSITORY_NAME }}:${{ vars.VERSION }}/g' ./.github/aws/task-definition-prod.json
          sed -i 's/<DB_USERNAME>/${{ vars.DB_USERNAME }}/g' ./.github/aws/task-definition-prod.json
          sed -i 's|<DB_URL>|${{ vars.DB_URL }}|g' ./.github/aws/task-definition-prod.json
          sed -i 's/<DB_PASSWORD>/${{ secrets.DB_PASSWORD }}/g' ./.github/aws/task-definition-prod.json
      - name: üöÄ Deploy to ECS
        run: |
          echo "üîí Setting AWS credentials"
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}

          if [ ${{ github.ref_name }} == 'main' ]; then
            echo "üì¢ Updating task definition"
            aws ecs register-task-definition --family ${{ vars.AWS_TASK_DEFINITION_NAME }} --cli-input-json file://./.github/aws/task-definition-prod.json
          fi

          echo "üöÄ Deploying to ECS"
          aws ecs update-service --cluster ${{ vars.AWS_ECS_CLUSTER }} --service ${{ vars.AWS_ECS_SERVICE }} --force-new-deployment
  create-release:
    name: üêô Create GitHub Release
    if: ${{ github.ref_name == 'main' }}
    runs-on: self-hosted
    permissions:
      contents: write
    needs: build-and-push
    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4
      - name: ü™¢ Setup git
        run: |
          git config --global user.name "CI/CD Pipeline"
          git config --global user.email "contact@nevah5.dev"
      - name: üè∑Ô∏è Create tag
        run: |
          git tag -a ${{ vars.VERSION }} -m "Version ${{ vars.VERSION }}"
          git push --tags
      - uses: ncipollo/release-action@v1
        with:
          tag: ${{ vars.VERSION }}
          name: Version ${{ vars.VERSION }}
          generateReleaseNotes: true
